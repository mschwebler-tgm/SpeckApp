service: speck-app-backend
frameworkVersion: '2'

plugins:
  - serverless-webpack
  - serverless-deployment-bucket
  - serverless-offline
  - serverless-layers
  - serverless-scriptable-plugin

provider:
  name: aws
  runtime: nodejs12.x
  region: eu-central-1
  logRetentionInDays: 5
  versionFunctions: false
  deploymentBucket:
    name: speck-app-serverless-deployments-${opt:stage}
  layers:
    libNodeModule:
      path: lib
      description: "additional node_module"
  package:
    exclude:
      - lib/**
      - node_modules/**
    include:
      - package.json
  environment:
    REGION: ${self:provider.region}
    CALENDAR_DYNAMO_TABLE_NAME: ${self:custom.calendar.dynamoTableName}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:PutItem"
        - "dynamodb:GetItem"
      Resource: !GetAtt CalendarTable.Arn

package:
  include:
    - package.json

custom:
  stackName: ${self:service}-${opt:stage}
  scriptHooks:
    before:deploy:deploy: zip -ur .serverless/speck-app-backend.zip package.json  # package.json is needed by tsoa
  calendar:
    dynamoTableName: ${self:custom.stackName}-calendar-ddb

functions:
  calendarApi:
    handler: src/apiHandler.handler
    events:
      - http:
          path: /{proxy+}
          method: ANY
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            name: cognitoAuthorizer
            arn: !GetAtt UserPool.Arn
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

resources:
  - ${file(./infrastructure/aws/userPool.yml)}
  - ${file(./infrastructure/aws/calendarTable.yml)}
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
